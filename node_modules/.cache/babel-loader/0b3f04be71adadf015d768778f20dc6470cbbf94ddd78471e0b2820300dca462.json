{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseURL,\n      headers\n    } = _ref;\n    this.url = baseURL;\n    this._headers = headers;\n  }\n  _checkResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    ;\n    return Promise.reject(`Ошибка: ${response.status}`);\n  }\n  //отображение данных профиля с сервера\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  editUserInfo(data) {\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse);\n  }\n\n  //отображение карточек с сервера\n  getCards() {\n    return fetch(`${this.url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  addNewCard(data) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  likeCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  removeLikeCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  editAvatar(avatar) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\n;\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-52',\n  headers: {\n    authorization: \"d631afdb-03e9-4312-a4a7-1af0a84b5eb1\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseURL","headers","url","_headers","_checkResponse","response","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","editUserInfo","data","body","JSON","stringify","getCards","addNewCard","deleteCard","cardId","likeCard","removeLikeCard","editAvatar","avatar","api","authorization"],"sources":["/Users/andrewtitarenko/Desktop/mesto/mesto_react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({baseURL, headers}) {\n      this.url = baseURL;\n      this._headers = headers;\n  }\n\n  _checkResponse(response) {\n      if (response.ok) {\n        return response.json();\n      };\n      return Promise.reject(`Ошибка: ${response.status}`);\n    };\n\n  //отображение данных профиля с сервера\n  getUserInfo() {\n      return fetch(`${this.url}/users/me`, {\n              method: \"GET\",\n              headers: this._headers,\n          })\n          .then(this._checkResponse);\n      };\n\n  editUserInfo(data) {\n       return fetch(`${this.url}/users/me`, {\n          method: 'PATCH',\n          headers: this._headers,\n          body: JSON.stringify(data),\n          })\n         .then(this._checkResponse);\n  }\n\n  //отображение карточек с сервера\n  getCards() {\n      return fetch(`${this.url}/cards`, {\n              method: \"GET\",\n              headers: this._headers,\n          })\n          .then(this._checkResponse);\n  }\n\n\n  addNewCard(data) {\n      return fetch(`${this.url}/cards`, {\n              method: 'POST',\n              headers: this._headers,\n              body: JSON.stringify(data),\n              })\n              .then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n      return fetch(`${this.url}/cards/${cardId}`, {\n              method: 'DELETE',\n              headers: this._headers,\n              })\n              .then(this._checkResponse);\n  }\n\n  likeCard(cardId) {\n      return fetch(`${this.url}/cards/${cardId}/likes`, {\n               method: 'PUT',\n               headers: this._headers,\n              })\n              .then(this._checkResponse);\n  }\n\n  removeLikeCard(cardId) {\n      return fetch(`${this.url}/cards/${cardId}/likes`, {\n          method: 'DELETE',\n          headers: this._headers,\n         })\n         .then(this._checkResponse);\n  }\n\n   editAvatar(avatar) {\n      return fetch(`${this.url}/users/me/avatar`, {\n          method: 'PATCH',\n          headers: this._headers,\n          body: JSON.stringify({\n          avatar: avatar,\n      }),\n          })\n          .then(this._checkResponse);\n  }\n};\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-52',\n  headers: {\n    authorization: \"d631afdb-03e9-4312-a4a7-1af0a84b5eb1\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}